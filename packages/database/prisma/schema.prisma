// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  emailVerified       DateTime?
  updatedAt           DateTime       @updatedAt
  firstName           String?        
  lastName            String?       
  role                Role           @default(USER)
  profile             UserProfile?  
  createdAt           DateTime       @default(now())
  accounts            Account[]
  sessions            Session[]
  verificationTokens  VerificationToken[]
  hashedPassword      String?           
}

model Admin {
  id                  String         @id @default(cuid())
  username            String         @unique
  role                Role           @default(ADMIN)
  hashedPassword      String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}


model Account {
  id                  String         @id @default(cuid())   
  userId              String         @unique    
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  
  access_token        String?  
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  
  session_state       String?
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
                                     @@unique([provider, providerAccountId])
}

model Session {
  id                  String         @id @default(cuid())  
  sessionToken        String         @unique
  userId              String
  expires             DateTime
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id                  String         @id @default(cuid())
  userId              String
  identifier          String
  token               String         @unique
  expires             DateTime
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
                                     @@unique([identifier, token])
}

model LanguageKnown {
  id                  String         @id @default(cuid())
  language            String         
  userProfileId       String            
  userProfile         UserProfile    @relation(fields: [userProfileId], references: [id])
}

model UserProfile {
 id                  String         @id @default(cuid())
 userId              String         @unique
 user                User           @relation(fields: [userId], references: [id]) 
 bio                 String?
 isPolitician        Boolean?       
 approvalStatus      ApprovalStatus @default(PENDING) 
 createdAt           DateTime       @default(now()) 
 fathersName         String?
 dateOfBirth         DateTime?
 age                 Int?
 placeOfBirth        String?
 maritalStatus       String?
 languagesKnown      LanguageKnown[]
 party               String?
 beforeProfession    String?
 spouse              String?
 state               String?
 education           String?
 address             String?
 contact             String?
 awardsHonours       String?
 positionsHeld       String?
 photo               String?        
 website             String?
}